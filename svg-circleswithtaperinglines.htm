<style>
	svg {
		margin: 0;
	}
	
	circle {
		fill: #dad;
	}

	path {
		stroke-width: 0;		
		stroke-linecap: round;
	}

</style>


<script type="text/javascript">

	
	
	// Tapering paths, dragable circles
	function viz0(container) 
	{
		var width = 600,
			height = 300;

		var radius = 25;
		
		// update link source/target values to match changes in the number of circles
		var numCircles = 6; 
		
		//??
		var d3LineBasis = d3.svg.line().interpolate("basis");
		
		// color range for flow lines 
		var d3color = d3.interpolateRgb("#444", "#999"); 
		
		var drag = d3.behavior.drag()
			.origin(Object)
			.on("drag", function(){ dragmove(this); });


		// array of random x,y coordinates for circles, away from edges
		var circles = d3.range(numCircles).map(function(i, d) 
			{
				return [
					Math.round(50 + (i/numCircles)*(width - 50)),
					Math.round(30 + Math.random()*(height - 80))
				];
			});
		
		// line data
		var links = 
		[
			{source: 0, target: 5, strength: Math.round(Math.random()*10)},
			{source: 0, target: 2, strength: Math.round(Math.random()*10)},
			{source: 1, target: 3, strength: Math.round(Math.random()*10)},
			{source: 2, target: 4, strength: Math.round(Math.random()*10)},
			{source: 3, target: 5, strength: Math.round(Math.random()*10)},
			{source: 5, target: 0, strength: Math.round(Math.random()*10)},
			{source: 2, target: 0, strength: Math.round(Math.random()*10)},
			{source: 3, target: 1, strength: Math.round(Math.random()*10)}
		];

		// global strength scale
		var strength_scale = d3.scale.linear()
			.range([2, 10])
			.domain([0, d3.max(links, function(d) { return d.strength; })]);

		// global color scale
		var color_scale = d3.scale.linear()
			.range([0, 1])
			.domain([0, d3.max(links, function(d) { return d.strength; })]);

		// create canvas
		var svg = d3.select(container).append("svg")
			.attr("width", width)
			.attr("height", height);

		// add lines
		var g_lines = svg.append("g")
			.attr("class","lines");

		// add circles
		var g_circles = svg.append("g")
			.attr("class","circles");

		$.each(circles, function(i, d) 
		{
			g_circles.append("circle")
			.attr("class","circle")
			.attr("id", "fourcircle" + i)
			.attr("r", radius)
			.attr("cx", d[0])
			.attr("cy", d[1])
			.call(drag);
		});
		
		g_lines.selectAll(".link_line")
			.data(links)
			.enter()
		  .append("path")
			.attr("class", "link_line")
			.attr("fill", function(d) { return d3color(color_scale(d.strength)); })
			.attr("id", function(i, d) { return "fourlink_line" + d; } )
			.attr("d", function(d){ return drawCurve(d) });
	
		function dragmove(dragged) 
		{
			var x = d3.select(dragged).attr("cx");
			var y = d3.select(dragged).attr("cy");
			d3.select(dragged)
			.attr("cx", Math.max(radius, Math.min(width - radius, +x + d3.event.dx)))
			.attr("cy", Math.max(radius, Math.min(height - radius, +y + d3.event.dy)));
			
			$.each(links, function(i, link)
			{
				if (link.source == dragged.id.match(/\d+/)[0] || link.target == dragged.id.match(/\d+/)[0]) 
				{
					d3.select('#fourlink_line' + i).attr("d", function(d){ return drawCurve(d) });
				}
			});
		}
		
		function drawCurve(d) {
			//percentage of line line to offset curves
			var offsetScale = 0.1; 

			var sourceX = +d3.select('#fourcircle' + d.source).attr("cx");
			var sourceY = +d3.select('#fourcircle' + d.source).attr("cy");
			var targetX = +d3.select('#fourcircle' + d.target).attr("cx");
			var targetY = +d3.select('#fourcircle' + d.target).attr("cy");

			var slope = Math.atan2(targetY - sourceY, targetX - sourceX );
			var slopePlus90 = Math.atan2(targetY - sourceY, targetX - sourceX ) + (Math.PI/2);

			var halfX = (sourceX + targetX)/2;
			var halfY = (sourceY + targetY)/2;

			var lineLength = Math.sqrt(Math.pow(targetX - sourceX, 2) + Math.pow(targetY - sourceY, 2));

			var MP1X = halfX + (offsetScale * lineLength + strength_scale(d.strength)/2) * Math.cos(slopePlus90);
			var MP1Y = halfY + (offsetScale * lineLength + strength_scale(d.strength)/2) * Math.sin(slopePlus90);
			var MP2X = halfX + (offsetScale * lineLength - strength_scale(d.strength)/2) * Math.cos(slopePlus90);
			var MP2Y = halfY + (offsetScale * lineLength - strength_scale(d.strength)/2) * Math.sin(slopePlus90);

			var points = [];
			points.push([(sourceX - strength_scale(d.strength) * Math.cos(slopePlus90)),(sourceY - strength_scale(d.strength) * Math.sin(slopePlus90))]);
			points.push([MP2X,MP2Y]);
			points.push(([(targetX  + radius * Math.cos(slope)), (targetY + radius * Math.sin(slope))]));
			points.push(([(targetX  + radius * Math.cos(slope)), (targetY + radius * Math.sin(slope))]));
			points.push([MP1X, MP1Y]);
			points.push([(sourceX + strength_scale(d.strength) * Math.cos(slopePlus90)),(sourceY + strength_scale(d.strength) * Math.sin(slopePlus90))]);

			return d3LineBasis(points) + "Z";
		}
	}

	viz0('header');
	
</script>
